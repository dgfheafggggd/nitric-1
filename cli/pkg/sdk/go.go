package sdk

import (
	"bytes"
	"fmt"
	"go/format"
	"path/filepath"
	"text/template"

	"github.com/nitrictech/nitric/cli/pkg/schema"
	"github.com/spf13/afero"
)

type SDKTemplateData struct {
	Package    string
	ImportPath string
	Buckets    []BucketTemplateData
}

type BucketTemplateData struct {
	Name string
	ID   string
}

func AppSpecToTemplateData(appSpec schema.Application) SDKTemplateData {
	buckets := []BucketTemplateData{}
	for name, resource := range appSpec.Resources {

		if resource.Type != "bucket" {
			continue
		}

		buckets = append(buckets, BucketTemplateData{
			Name: name,
			ID:   name,
		})
	}

	return SDKTemplateData{
		// TODO: use something better
		Package: appSpec.Name,
		// ImportPath: ,
		Buckets: buckets,
	}
}

// GenerateGoSDK generates Go SDK
func GenerateGoSDK(fs afero.Fs, appSpec schema.Application, outPath string) error {
	tmpl := template.Must(template.New("client").Parse(clientTemplate))
	data := AppSpecToTemplateData(appSpec)

	var buf bytes.Buffer
	err := tmpl.Execute(&buf, data)
	if err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("failed to format generated code: %w", err)
	}

	err = fs.MkdirAll(outPath, 0755)
	if err != nil {
		return fmt.Errorf("failed to create output directory: %w", err)
	}

	filePath := filepath.Join(outPath, "client.go")
	err = afero.WriteFile(fs, filePath, formatted, 0644)
	if err != nil {
		return fmt.Errorf("failed to write generated file: %w", err)
	}

	fmt.Printf("Go SDK generated at %s\n", filePath)

	return nil
}

const clientTemplate = `// Code generated by Nitric SDK generator. DO NOT EDIT.

package {{.Package}}

import (
	"fmt"

	// "{{.ImportPath}}"
)

{{range .Buckets}}
// {{.Name}} provides methods for bucket "{{.Name}}"
type {{.Name}} struct {
	// storage *storage.Client
}

// New{{.Name}} creates a new client for bucket "{{.ID}}"
func New{{.Name}}() *{{.Name}} {
	return &{{.Name}}{
		// storage: storageClient,
	}
}

// Read reads a file from the {{.Name}} bucket
func (c *{{.Name}}) Read(file string) error {
	fmt.Println("Reading file from bucket:", "{{.ID}}", "File:", file)
	return nil
}

// Write writes a file to the {{.Name}} bucket
func (c *{{.Name}}) Write(file string, data []byte) error {
	fmt.Println("Writing file to bucket:", "{{.ID}}", "File:", file)
	return nil
}

{{end}}

// Nitric provides access to application resources
type Nitric struct {
	{{range .Buckets}}{{.Name}} *{{.Name}}
	{{end}}
}

// NewNitric creates a new set of all bucket clients
func NewNitric() *Nitric {
	// TODO: initialize any required clients from the general purpose SDK

	return &Nitric{
		{{range .Buckets}}{{.Name}}: New{{.Name}}(),
		{{end}}
	}
}
`
